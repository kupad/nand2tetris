class Ninjy {
    field int location;

    constructor Ninjy new() {
        let location = 0;
        return this;
    }

    method void draw() {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 992);
        do Memory.poke(memAddress+128, 1008);
        do Memory.poke(memAddress+160, 240);
        do Memory.poke(memAddress+192, 1008);
        do Memory.poke(memAddress+224, 992);
        do Memory.poke(memAddress+256, 4088);
        do Memory.poke(memAddress+288, 4088);
        do Memory.poke(memAddress+320, 544);
        do Memory.poke(memAddress+352, 544);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    
    method void erase() {
        var int memAddress;
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void moveRight() {
        var Ninjy self;
        let self = this;
        do self.erase();
        let location = location + 1;
        do self.draw();
        return;
    }


    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}

