// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    //instruction[16]:
    //cccccccccccccccc
    //
    //A-instr
    //0ccccccccccccccc 
    //  instruction[15] == 0
    //  c0...c14 is a memory location (or val)
    //
    //C-instruction:
    //1xxaccccccdddjjj 
    //  instruction[15] == 1
    //
    //acccc 'comp' instruction[6-12]
    //  a: instruction[12]
    //  c: instruction[6..11]
    //ddd 'dest' instruction[3-5]
    //  M: instruction[3]
    //  D: instruction[4]
    //  A: instruction[5]
    //jjj 'jump' instruction[0-2]
    //  table defined below

    PARTS:

    /* A reg */
        //Choose: what is fed to Areg?
        //If A-instruction, instruction is input
        //else, ALUout is input
        Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain);

        //Choose: is A register being loaded?
        //A register is loaded either if A-instruction or if the A dest bit is set (instruction[5])
        Not(in=instruction[15], out=isAinstr);
        Or(a=isAinstr, b=instruction[5], out=loadA);

        ARegister(in=Ain, load=loadA, 
            out=Aout, 
            out[0..14]=addressM);

    /* D reg */
        //Load D reg: iff is C-instruction and D destination bit is set
        And(a=instruction[15], b=instruction[4], out=loadD);
        DRegister(in=ALUout, load=loadD, out=Dout);

    /* ALU */
        //Choose: is A or inM being fed to the ALU
        Mux16(a=Aout, b=inM, sel=instruction[12], out=AorMout);

        ALU(x=Dout, y=AorMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
            out=ALUout, zr=eq, ng=lt,
            out=outM);

    /* write to M? */
        And(a=instruction[15], b=instruction[3], out=writeM);

    /* jump */
        Not(in=eq, out=ne);
        Not(in=lt, out=ge); 
        And(a=ne, b=ge, out=gt); 

        //jmp if:
        //GT: instruction[0]
        //EQ: instruction[1]
        //LT: instruction[2]

        And(a=instruction[0], b=gt, out=jgt);
        And(a=instruction[1], b=eq, out=jeq);
        And(a=instruction[2], b=lt, out=jlt);
        Or(a=jgt,  b=jeq, out=jtmp1);
        Or(a=jtmp1, b=jlt, out=jtmp2);
        And(a=instruction[15], b=jtmp2, out=jmp);

    /* PC */
        PC(in=Aout, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}

