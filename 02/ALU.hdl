// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    /* process x */
    //apply zx: choose x or 0
    /*
    Mux16(a=x, b=false, sel=zx, out=zxa);
    */
    Not(in=zx, out=nzx);
    And16(a=x, 
        b[0]=nzx,
        b[1]=nzx,
        b[2]=nzx,
        b[3]=nzx,
        b[4]=nzx,
        b[5]=nzx,
        b[6]=nzx,
        b[7]=nzx,
        b[8]=nzx,
        b[9]=nzx,
        b[10]=nzx,
        b[11]=nzx,
        b[12]=nzx,
        b[13]=nzx,
        b[14]=nzx,
        b[15]=nzx,
        out=zxa);

    //apply nx: choose zxa or !zxa
    Not16(in=zxa, out=nzxa);
    Mux16(a=zxa, b=nzxa, sel=nx, out=xx);

    /* process y */
    //apply zy: choose y or 0
    Mux16(a=y, b=false, sel=zy, out=zya);
    //apply ny: choose zya or !zya
    Not16(in=zya, out=nzya);
    Mux16(a=zya, b=nzya, sel=ny, out=yy);

    /* apply f */
    //calculate xx+yy and xx&&yy, and then choose based on f
    Add16(a=xx, b=yy, out=xplusy);
    And16(a=xx, b=yy, out=xandy);
    Mux16(a=xandy, b=xplusy, sel=f, out=fa); //fa: f applied

    /*apply no*/
    Not16(in=fa, out=nfa);
    //choose fa or nfa based on no.
    //note the multiple outputs
    //ng: out is less than 0 if its MSB is 1
    //hiresult and loresult so that we can calculate zr later
    Mux16(a=fa, b=nfa, sel=no, out[0..7]=loresult, out[8..15]=hiresult, out[15]=ng, out=out); 

    //zr: out is 0 only if ALL its bits are zero. If we OR all the bits, it's only 0 if all bits are 0. then flip the result
    Or8Way(in=loresult, out=zrtmp1);
    Or8Way(in=hiresult, out=zrtmp2);
    Or(a=zrtmp1, b=zrtmp2, out=zrtmp3);
    Not(in=zrtmp3, out=zr);
}

